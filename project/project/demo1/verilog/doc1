Program 0 /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/branchTest.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/branchTest.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
Skipping memory2c.syn.v, seems like a file meant for synthesis
-------------------------------------------------
Step: 2
Compiling the following verilog files: additionLogic.v alu_op.v alu.v clkrst.v dff.v extendImm.v fourBitCLA.v memory2c.v op_control.v pc_control.v PFA.v proc_hier_bench.v proc_hier.v proc.v reg16bit.v rf.v shifter.v simpleAlu.v sixteenBitCLA.v 
Top module: proc_hier_bench
Compilation log in wsrun.log
Executing rm -rf __work dump.wlf dump.vcd diff.trace diff.ptrace archsim.trace archsim.ptrace verilogsim.trace verilogsim.ptrace
Executing vlib __work
Executing vlog +define+RANDSEED=3 -work __work additionLogic.v alu_op.v alu.v clkrst.v dff.v extendImm.v fourBitCLA.v memory2c.v op_control.v pc_control.v PFA.v proc_hier_bench.v proc_hier.v proc.v reg16bit.v rf.v shifter.v simpleAlu.v sixteenBitCLA.v
QuestaSim vlog 10.4c Compiler 2015.07 Jul 19 2015
Start time: 00:26:21 on Mar 13,2017
vlog "+define+RANDSEED=3" -work __work additionLogic.v alu_op.v alu.v clkrst.v dff.v extendImm.v fourBitCLA.v memory2c.v op_control.v pc_control.v PFA.v proc_hier_bench.v proc_hier.v proc.v reg16bit.v rf.v shifter.v simpleAlu.v sixteenBitCLA.v 
-- Compiling module additionLogic
-- Compiling module alu_op
-- Compiling module alu
-- Compiling module clkrst
-- Compiling module dff
-- Compiling module extendImm
-- Compiling module fourBitCLA
-- Compiling module memory2c
-- Compiling module op_control
-- Compiling module pc_control
-- Compiling module PFA
-- Compiling module proc_hier_bench
-- Compiling module proc_hier
-- Compiling module proc
-- Compiling module reg16bit
-- Compiling module rf
-- Compiling module shifter
-- Compiling module simpleAlu
-- Compiling module sixteenBitCLA

Top level modules:
	proc_hier_bench
End time: 00:26:21 on Mar 13,2017, Elapsed time: 0:00:00
Errors: 0, Warnings: 0
-------------------------------------------------
Step: 3
Running Verilog simulation...details in wsrun.log
Reading pref.tcl

# 10.4c

# vsim -c proc_hier_bench -lib __work -voptargs="+acc" -wlf dump.wlf -do "log -howmany -rec /* ; run -all" 
# Start time: 00:26:22 on Mar 13,2017
# ** Note: (vsim-3812) Design is being optimized...
# //  Questa Sim
# //  Version 10.4c linux Jul 19 2015
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# Loading work.proc_hier_bench(fast)
# Loading work.proc_hier(fast)
# Loading work.clkrst(fast)
# Loading work.proc(fast)
# Loading work.memory2c(fast)
# Loading work.pc_control(fast)
# Loading work.simpleAlu(fast)
# Loading work.additionLogic(fast)
# Loading work.sixteenBitCLA(fast)
# Loading work.fourBitCLA(fast)
# Loading work.PFA(fast)
# Loading work.op_control(fast)
# Loading work.rf(fast)
# Loading work.reg16bit(fast)
# Loading work.alu_op(fast)
# Loading work.extendImm(fast)
# Loading work.alu(fast)
# Loading work.shifter(fast)
# Loading work.dff(fast)
# log -howmany -rec /* 
# 1636
#  run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.trace for output
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# ** Note: $finish    : proc_hier_bench.v(96)
#    Time: 3400 ns  Iteration: 1  Instance: /proc_hier_bench
# End time: 00:26:23 on Mar 13,2017, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
-------------------------------------------------
Step: 4
Verilog simulation successful
See verilogsim.log and verilogsim.trace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 5
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 6
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/branchTest.asm.
Program 1 /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/easyTest.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/easyTest.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading pref.tcl

# 10.4c

# vsim -c proc_hier_bench -lib __work -voptargs="+acc" -wlf dump.wlf -do "log -howmany -rec /* ; run -all" 
# Start time: 00:26:24 on Mar 13,2017
# ** Note: (vsim-8009) Loading existing optimized design _opt
# //  Questa Sim
# //  Version 10.4c linux Jul 19 2015
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# Loading work.proc_hier_bench(fast)
# Loading work.proc_hier(fast)
# Loading work.clkrst(fast)
# Loading work.proc(fast)
# Loading work.memory2c(fast)
# Loading work.pc_control(fast)
# Loading work.simpleAlu(fast)
# Loading work.additionLogic(fast)
# Loading work.sixteenBitCLA(fast)
# Loading work.fourBitCLA(fast)
# Loading work.PFA(fast)
# Loading work.op_control(fast)
# Loading work.rf(fast)
# Loading work.reg16bit(fast)
# Loading work.alu_op(fast)
# Loading work.extendImm(fast)
# Loading work.alu(fast)
# Loading work.shifter(fast)
# Loading work.dff(fast)
# log -howmany -rec /* 
# 1636
#  run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.trace for output
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# ** Note: $finish    : proc_hier_bench.v(96)
#    Time: 17800 ns  Iteration: 1  Instance: /proc_hier_bench
# End time: 00:26:25 on Mar 13,2017, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.trace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/easyTest.asm.
Program 2 /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/firstTest.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/firstTest.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading pref.tcl

# 10.4c

# vsim -c proc_hier_bench -lib __work -voptargs="+acc" -wlf dump.wlf -do "log -howmany -rec /* ; run -all" 
# Start time: 00:26:26 on Mar 13,2017
# ** Note: (vsim-8009) Loading existing optimized design _opt
# //  Questa Sim
# //  Version 10.4c linux Jul 19 2015
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# Loading work.proc_hier_bench(fast)
# Loading work.proc_hier(fast)
# Loading work.clkrst(fast)
# Loading work.proc(fast)
# Loading work.memory2c(fast)
# Loading work.pc_control(fast)
# Loading work.simpleAlu(fast)
# Loading work.additionLogic(fast)
# Loading work.sixteenBitCLA(fast)
# Loading work.fourBitCLA(fast)
# Loading work.PFA(fast)
# Loading work.op_control(fast)
# Loading work.rf(fast)
# Loading work.reg16bit(fast)
# Loading work.alu_op(fast)
# Loading work.extendImm(fast)
# Loading work.alu(fast)
# Loading work.shifter(fast)
# Loading work.dff(fast)
# log -howmany -rec /* 
# 1636
#  run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.trace for output
# Error
# Error
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# ** Note: $finish    : proc_hier_bench.v(96)
#    Time: 4600 ns  Iteration: 1  Instance: /proc_hier_bench
# End time: 00:26:26 on Mar 13,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.trace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/firstTest.asm.
Program 3 /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/loadStoreTest.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/loadStoreTest.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading pref.tcl

# 10.4c

# vsim -c proc_hier_bench -lib __work -voptargs="+acc" -wlf dump.wlf -do "log -howmany -rec /* ; run -all" 
# Start time: 00:26:27 on Mar 13,2017
# ** Note: (vsim-8009) Loading existing optimized design _opt
# //  Questa Sim
# //  Version 10.4c linux Jul 19 2015
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# Loading work.proc_hier_bench(fast)
# Loading work.proc_hier(fast)
# Loading work.clkrst(fast)
# Loading work.proc(fast)
# Loading work.memory2c(fast)
# Loading work.pc_control(fast)
# Loading work.simpleAlu(fast)
# Loading work.additionLogic(fast)
# Loading work.sixteenBitCLA(fast)
# Loading work.fourBitCLA(fast)
# Loading work.PFA(fast)
# Loading work.op_control(fast)
# Loading work.rf(fast)
# Loading work.reg16bit(fast)
# Loading work.alu_op(fast)
# Loading work.extendImm(fast)
# Loading work.alu(fast)
# Loading work.shifter(fast)
# Loading work.dff(fast)
# log -howmany -rec /* 
# 1636
#  run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.trace for output
# Error
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# Error signal asserted
# ** Note: $finish    : proc_hier_bench.v(96)
#    Time: 3600 ns  Iteration: 1  Instance: /proc_hier_bench
# End time: 00:26:27 on Mar 13,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.trace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/loadStoreTest.asm.
Program 4 /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/shiftTest.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/shiftTest.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading pref.tcl

# 10.4c

# vsim -c proc_hier_bench -lib __work -voptargs="+acc" -wlf dump.wlf -do "log -howmany -rec /* ; run -all" 
# Start time: 00:26:28 on Mar 13,2017
# ** Note: (vsim-8009) Loading existing optimized design _opt
# //  Questa Sim
# //  Version 10.4c linux Jul 19 2015
# //
# //  Copyright 1991-2015 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //  THIS DOCUMENT CONTAINS TRADE SECRETS AND COMMERCIAL OR FINANCIAL
# //  INFORMATION THAT ARE PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM
# //  DISCLOSURE UNDER THE FREEDOM OF INFORMATION ACT, 5 U.S.C. SECTION 552.
# //  FURTHERMORE, THIS INFORMATION IS PROHIBITED FROM DISCLOSURE UNDER
# //  THE TRADE SECRETS ACT, 18 U.S.C. SECTION 1905.
# //
# Loading work.proc_hier_bench(fast)
# Loading work.proc_hier(fast)
# Loading work.clkrst(fast)
# Loading work.proc(fast)
# Loading work.memory2c(fast)
# Loading work.pc_control(fast)
# Loading work.simpleAlu(fast)
# Loading work.additionLogic(fast)
# Loading work.sixteenBitCLA(fast)
# Loading work.fourBitCLA(fast)
# Loading work.PFA(fast)
# Loading work.op_control(fast)
# Loading work.rf(fast)
# Loading work.reg16bit(fast)
# Loading work.alu_op(fast)
# Loading work.extendImm(fast)
# Loading work.alu(fast)
# Loading work.shifter(fast)
# Loading work.dff(fast)
# log -howmany -rec /* 
# 1636
#  run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.trace for output
# Error
# Error
# Error signal asserted
# Error signal asserted
# ** Note: $finish    : proc_hier_bench.v(96)
#    Time: 10 us  Iteration: 1  Instance: /proc_hier_bench
# End time: 00:26:28 on Mar 13,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.trace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
75,77c75,77
< INUM:       74 PC: 0x0094 REG: 4 VALUE: 0x0000
< INUM:       75 PC: 0x0096 REG: 5 VALUE: 0x0000
< INUM:       76 PC: 0x0098 REG: 3 VALUE: 0x0002
---
> INUM:       74 PC: 0x0094 REG: 4 VALUE: 0x0001
> INUM:       75 PC: 0x0096 REG: 5 VALUE: 0x0004
> INUM:       76 PC: 0x0098 REG: 3 VALUE: 0x0006
80c80
< INUM:       79 PC: 0x009e REG: 3 VALUE: 0x000a
---
> INUM:       79 PC: 0x009e REG: 3 VALUE: 0x000e
83,86c83,86
< INUM:       82 PC: 0x00a4 REG: 3 VALUE: 0x000a
< INUM:       83 PC: 0x00a6 REG: 4 VALUE: 0x0000
< INUM:       84 PC: 0x00a8 REG: 5 VALUE: 0x0000
< INUM:       85 PC: 0x00aa REG: 3 VALUE: 0x000a
---
> INUM:       82 PC: 0x00a4 REG: 3 VALUE: 0x000e
> INUM:       83 PC: 0x00a6 REG: 4 VALUE: 0x0001
> INUM:       84 PC: 0x00a8 REG: 5 VALUE: 0x0020
> INUM:       85 PC: 0x00aa REG: 3 VALUE: 0x002e
89c89
< INUM:       88 PC: 0x00b0 REG: 3 VALUE: 0x004a
---
> INUM:       88 PC: 0x00b0 REG: 3 VALUE: 0x006e
92c92
< INUM:       91 PC: 0x00b6 REG: 3 VALUE: 0x00ca
---
> INUM:       91 PC: 0x00b6 REG: 3 VALUE: 0x00ee
95,97c95,97
< INUM:       94 PC: 0x00bc REG: 3 VALUE: 0x00ca
< INUM:       95 PC: 0x00be REG: 7 VALUE: 0x1288
< INUM:       96 PC: 0x00c0 REG: 7 VALUE: 0x1288
---
> INUM:       94 PC: 0x00bc REG: 3 VALUE: 0x00ee
> INUM:       95 PC: 0x00be REG: 7 VALUE: 0x12ac
> INUM:       96 PC: 0x00c0 REG: 7 VALUE: 0x12ac
FAILED. See differences in diff.trace. Search for ***DIFF***
Use kompare archsim.trace verilogsim.trace to see differences side by side.
OR use tkdiff.tcl archsim.trace verilogsim.trace to see differences side by side.
Open dump.wlf in modelsim using, vsim -view dataset=dump.wlf
Program source listing and raw bits are in loadfile.list. Open using gedit loadfile.lst
-------------------------------------------------
Final log, saved in summary.log
/u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/branchTest.asm SUCCESS CPI:1.1 CYCLES:35 ICOUNT:32 IHITRATE: 0 DHITRATE: 0
/u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/easyTest.asm SUCCESS CPI:1.0 CYCLES:179 ICOUNT:176 IHITRATE: 0 DHITRATE: 0
/u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/firstTest.asm SUCCESS CPI:1.1 CYCLES:47 ICOUNT:44 IHITRATE: 0 DHITRATE: 0
/u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/loadStoreTest.asm SUCCESS CPI:1.1 CYCLES:37 ICOUNT:34 IHITRATE: 0 DHITRATE: 0
/u/k/a/karu/courses/cs552/spring2013/handouts/testprograms/public/complex_demo1/shiftTest.asm FAILED
